version: '3.8'

services:
  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    container_name: mlops-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server 
          --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
          --default-artifact-root s3://mlflow-artifacts
          --host 0.0.0.0
          --port 5000
      "
    depends_on:
      - postgres
    networks:
      - mlops-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: mlops-postgres
    environment:
      - POSTGRES_DB=mlflow
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mlops-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: mlops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - mlops-network
    restart: unless-stopped

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio
    container_name: mlops-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mlops-network
    restart: unless-stopped

  # Create MinIO buckets
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/mlflow-artifacts;
      /usr/bin/mc mb minio/data-lake;
      /usr/bin/mc policy set public minio/mlflow-artifacts;
      exit 0;
      "
    networks:
      - mlops-network

  # MLOps API Server
  api-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: mlops-api
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=postgresql://mlflow:mlflow@postgres:5432/mlflow
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - mlflow
      - postgres
      - redis
      - minio
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Training Service
  model-training:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: training
    container_name: mlops-training
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=postgresql://mlflow:mlflow@postgres:5432/mlflow
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./experiments:/app/experiments
      - ./logs:/app/logs
    depends_on:
      - mlflow
      - postgres
      - minio
    networks:
      - mlops-network
    restart: "no"  # Run once for training
    profiles:
      - training

  # Monitoring Service
  monitoring:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: monitoring
    container_name: mlops-monitoring
    ports:
      - "9090:9090"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=postgresql://mlflow:mlflow@postgres:5432/mlflow
      - API_ENDPOINT=http://api-server:8000
    volumes:
      - ./logs:/app/logs
      - ./dashboards:/app/dashboards
    depends_on:
      - api-server
    networks:
      - mlops-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # Jupyter Notebook for experimentation
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: mlops-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
    command: >
      bash -c "
        pip install jupyterlab &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
      "
    depends_on:
      - mlflow
    networks:
      - mlops-network
    restart: unless-stopped
    profiles:
      - development

  # nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mlops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - api-server
      - mlflow
      - grafana
    networks:
      - mlops-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  mlops-network:
    driver: bridge