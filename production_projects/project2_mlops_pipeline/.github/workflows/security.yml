name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM

env:
  PYTHON_VERSION: '3.9'

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Safety check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          
      - name: Generate safety report
        run: |
          python -c "
          import json
          import os
          
          if os.path.exists('safety-report.json'):
              with open('safety-report.json', 'r') as f:
                  try:
                      data = json.load(f)
                      if isinstance(data, list) and len(data) > 0:
                          print('⚠️  Security vulnerabilities found:')
                          for vuln in data:
                              print(f'  - {vuln.get(\"advisory\", \"Unknown\")}')
                      else:
                          print('✅ No known vulnerabilities found')
                  except json.JSONDecodeError:
                      print('ℹ️  Safety check completed')
          else:
              print('✅ No known vulnerabilities found')
          "

      - name: Upload safety report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run bandit security scan
        run: |
          bandit -r training/ serving/ monitoring/ \
            -f json \
            -o bandit-report.json \
            --severity-level medium \
            --confidence-level medium || true

      - name: Generate bandit report
        run: |
          python -c "
          import json
          import os
          
          if os.path.exists('bandit-report.json'):
              with open('bandit-report.json', 'r') as f:
                  try:
                      data = json.load(f)
                      results = data.get('results', [])
                      
                      if len(results) > 0:
                          print(f'⚠️  {len(results)} potential security issues found:')
                          for issue in results[:5]:  # Show first 5
                              print(f'  - {issue.get(\"test_name\", \"Unknown\")}: {issue.get(\"issue_text\", \"\")}')
                          if len(results) > 5:
                              print(f'  ... and {len(results) - 5} more')
                      else:
                          print('✅ No security issues found')
                  except json.JSONDecodeError:
                      print('ℹ️  Bandit scan completed')
          else:
              print('✅ No security issues found')
          "

      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep \
            --config=auto \
            --json \
            --output=semgrep-report.json \
            training/ serving/ monitoring/ || true

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: semgrep-report
          path: semgrep-report.json

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          # Create a minimal Dockerfile for testing
          cat > Dockerfile.security << EOF
          FROM python:3.9-slim
          
          WORKDIR /app
          
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          COPY . .
          
          EXPOSE 8000
          CMD ["python", "-m", "uvicorn", "serving.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF
          
          docker build -t mlops-security-test:latest -f Dockerfile.security .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mlops-security-test:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip install -r requirements.txt
          pip-licenses --format=json --output-file=licenses.json

      - name: Validate licenses
        run: |
          python -c "
          import json
          
          # Define allowed licenses
          allowed_licenses = [
              'MIT', 'Apache 2.0', 'Apache Software License',
              'BSD License', 'BSD', '3-Clause BSD License',
              'GNU Lesser General Public License v2 or later (LGPLv2+)',
              'Mozilla Public License 2.0 (MPL 2.0)',
              'Python Software Foundation License',
              'ISC License (ISCL)', 'ISC', 'new BSD License',
              'Apache License', 'The Unlicense (Unlicense)'
          ]
          
          with open('licenses.json', 'r') as f:
              licenses = json.load(f)
          
          violations = []
          for package in licenses:
              license_name = package.get('License', 'Unknown')
              if license_name not in allowed_licenses and license_name != 'UNKNOWN':
                  violations.append(f\"{package['Name']}: {license_name}\")
          
          if violations:
              print('⚠️  License violations found:')
              for violation in violations:
                  print(f'  - {violation}')
              # Don't fail the build, just warn
          else:
              print('✅ All licenses are compliant')
          "

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security-scan, semgrep-scan, secret-scan, license-check]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Report |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ✅ Completed | safety-report.json |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ✅ Completed | bandit-report.json |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST (Semgrep) | ✅ Completed | semgrep-report.json |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ✅ Completed | TruffleHog |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ✅ Completed | licenses.json |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Review the generated reports for detailed findings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Keep dependencies updated regularly" >> $GITHUB_STEP_SUMMARY
          echo "- Review and fix any high-severity findings" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure no secrets are committed to the repository" >> $GITHUB_STEP_SUMMARY
          echo "- Use dependency pinning for production deployments" >> $GITHUB_STEP_SUMMARY