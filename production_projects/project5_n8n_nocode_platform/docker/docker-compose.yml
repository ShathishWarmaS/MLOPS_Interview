version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n_mlops
      POSTGRES_USER: n8n_user
      POSTGRES_PASSWORD: n8n_secure_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user -d n8n_mlops"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    restart: unless-stopped
    command: redis-server --requirepass redis_secure_password --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # n8n Web Application
  n8n_web:
    build:
      context: ..
      dockerfile: docker/Dockerfile.web
    container_name: n8n_web
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n_mlops
      DB_POSTGRESDB_USER: n8n_user
      DB_POSTGRESDB_PASSWORD: n8n_secure_password
      
      # Redis Configuration
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: redis_secure_password
      
      # n8n Configuration
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: admin_secure_password
      N8N_HOST: localhost
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      WEBHOOK_URL: http://localhost:5678/
      
      # Execution Configuration
      EXECUTIONS_PROCESS: main
      EXECUTIONS_MODE: queue
      EXECUTIONS_TIMEOUT: 3600
      EXECUTIONS_MAX_TIMEOUT: 7200
      
      # Security Configuration
      N8N_JWT_AUTH_ACTIVE: true
      N8N_JWT_AUTH_HEADER: authorization
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-super_secure_encryption_key_change_this}
      
      # Workflow Configuration
      WORKFLOWS_DEFAULT_NAME: "My Workflow"
      N8N_DEFAULT_BINARY_DATA_MODE: filesystem
      N8N_BINARY_DATA_TTL: 1440
      
      # Logging
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console,file
      N8N_LOG_FILE_LOCATION: /n8n/logs/
      
      # Custom Nodes
      N8N_CUSTOM_EXTENSIONS: /n8n/custom
      
      # ML/AI Configuration
      PYTHON_PATH: /usr/bin/python3
      MLFLOW_TRACKING_URI: http://mlflow:5000
      
      # Feature Flags
      N8N_DISABLE_UI: false
      N8N_DISABLE_PRODUCTION_MAIN_PROCESS: false
      N8N_PERSONALIZATION_ENABLED: true
      N8N_VERSION_NOTIFICATIONS_ENABLED: false
      
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/n8n/.n8n
      - n8n_files:/n8n/files
      - n8n_logs:/n8n/logs
      - ../packages/nodes-ml:/n8n/custom/nodes-ml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - n8n_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # n8n Worker (for queue processing)
  n8n_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    container_name: n8n_worker
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n_mlops
      DB_POSTGRESDB_USER: n8n_user
      DB_POSTGRESDB_PASSWORD: n8n_secure_password
      
      # Redis Configuration
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: redis_secure_password
      
      # Worker Configuration
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-super_secure_encryption_key_change_this}
      EXECUTIONS_PROCESS: own
      EXECUTIONS_MODE: queue
      
      # Logging
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console
      
      # Python and ML Configuration
      PYTHON_PATH: /usr/bin/python3
      MLFLOW_TRACKING_URI: http://mlflow:5000
      
    volumes:
      - n8n_data:/n8n/.n8n
      - n8n_files:/n8n/files
      - ../packages/nodes-ml:/n8n/custom/nodes-ml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - n8n_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    scale: 2  # Run 2 worker instances

  # MLflow Tracking Server
  mlflow:
    image: mlflow/mlflow:latest
    container_name: mlflow_server
    restart: unless-stopped
    command: >
      mlflow server
      --backend-store-uri postgresql://n8n_user:n8n_secure_password@postgres:5432/mlflow
      --default-artifact-root s3://mlflow-artifacts
      --host 0.0.0.0
      --port 5000
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "5000:5000"
    networks:
      - n8n_network
    depends_on:
      - postgres
      - minio

  # MinIO for MLflow Artifacts
  minio:
    image: minio/minio:latest
    container_name: minio_server
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - n8n_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_password
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - n8n_network
    depends_on:
      - prometheus

  # Jupyter for ML Development
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: jupyter_lab
    restart: unless-stopped
    environment:
      JUPYTER_ENABLE_LAB: yes
      JUPYTER_TOKEN: jupyter_secure_token
    ports:
      - "8888:8888"
    volumes:
      - jupyter_data:/home/jovyan/work
      - ../workflows:/home/jovyan/work/workflows:ro
    networks:
      - n8n_network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - n8n_network
    depends_on:
      - n8n_web
      - grafana
      - mlflow
      - jupyter

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  n8n_files:
    driver: local
  n8n_logs:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jupyter_data:
    driver: local

networks:
  n8n_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16